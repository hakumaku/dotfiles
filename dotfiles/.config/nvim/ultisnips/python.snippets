snippet new "__new__(self)"
def __new__(mcs, name: str, bases: tuple[type, ...], namespace: dict[str, Any]):
    return super().__new__(mcs, name, bases, namespace)
endsnippet

snippet enter "__enter__(self)"
def __enter__(self) -> Self:
	return self

def __exit__(
	self, exc_type: Type[BaseException] | None, exc_val: BaseException | None, exc_tb: TracebackType | None
) -> None:
    pass
endsnippet

snippet aenter "__aenter__(self)"
async def __aenter__(self) -> Self:
	return self

async def __aexit__(
	self, exc_type: Type[BaseException] | None, exc_val: BaseException | None, exc_tb: TracebackType | None
) -> None:
    pass
endsnippet

snippet Main "if __name__ == '__main__'"
def main() -> None:
    pass


if __name__ == "__main__":
    main()
endsnippet

snippet ift "if TYPE_CHECKING"
if TYPE_CHECKING:
    pass
endsnippet
