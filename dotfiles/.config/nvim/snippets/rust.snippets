snippet modtest "#[cfg(test)]\nmod test {...}"
    #[cfg(test)]
    mod tests {
        #[test]
        fn ${1:name}() {
            ${2:todo!();}
        }
    }
snippet test "#[test]"
    #[test]
	fn ${1:name}() {
        ${2:todo!();}
	}
snippet atest "#[tokio::test]"
    #[tokio::test]
	async fn ${1:name}() {
        ${2:todo!();}
	}

snippet fn "Function definition"
	fn ${1:function_name}(${2})${3} {
		${0}
	}
snippet pfn "Function definition"
	pub fn ${1:function_name}(${2})${3} {
		${0}
	}
snippet afn "Async function definition"
	async fn ${1:function_name}(${2})${3} {
		${0}
	}
snippet pafn "Async function definition"
	pub async fn ${1:function_name}(${2})${3} {
		${0}
	}
snippet bench "Bench function" b
	#[bench]
	fn ${1:bench_function_name}(b: &mut test::Bencher) {
		b.iter(|| {
			${0}
		})
	}
snippet new "Constructor function"
	pub fn new(${2}) -> ${1:Self} {
		$1 { ${3} }
	}
snippet main "Main function"
	pub fn main() {
		${0}
	}
snippet let "let variable declaration with type inference"
	let ${1} = ${2};
snippet lett "let variable declaration with explicit type annotation"
	let ${1}: ${2} = ${3};
snippet letm "let mut variable declaration with type inference"
	let mut ${1} = ${2};
snippet lettm "let mut variable declaration with explicit type annotation"
	let mut ${1}: ${2} = ${3};
snippet pri "print!"
	print!("${1}");
snippet pri, "print! with format param"
	print!("${1}{${2}}", ${3});
snippet pln "println!"
	println!("${1}");
snippet pln, "println! with format param"
	println!("${1}{${2}}", ${3});
snippet fmt "format!"
	format!("${1}{${2}}", ${3});
snippet d "dbg! debugging macro"
	dbg!(${0:${VISUAL}})
snippet d; "dbg! debugging macro statement"
	dbg!(&${1});
	${0}
snippet ec "extern crate"
	extern crate ${1:sync};
snippet ecl "extern crate log"
	#[macro_use]
