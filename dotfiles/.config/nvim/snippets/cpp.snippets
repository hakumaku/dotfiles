# A valid snippet should starts with:
#
#		snippet trigger_word [ "description" [ options ] ]
#
# and end with:
#
#		endsnippet
#
# Snippet options:
#
#		b - Beginning of line.
#		i - In-word expansion.
#		w - Word boundary.
#		r - Regular expression
#		e - Custom context snippet
#		A - Snippet will be triggered automatically, when condition matches.
#
# Basic example:
#
#		snippet emitter "emitter properties" b
#		private readonly ${1} = new Emitter<$2>()
#		public readonly ${1/^_(.*)/$1/}: Event<$2> = this.$1.event
#		endsnippet
#
# Online reference: https://github.com/SirVer/ultisnips/blob/master/doc/UltiSnips.txt

snippet i< "#include <...>" A
#include <${1}>
endsnippet

snippet i" "#include ..." A
#include "${1}"
endsnippet

snippet ig "#ifndef ... #endif" A
#ifndef `!p snip.rv = snip.basename.upper()`_INCLUDED
#define `!p snip.rv = snip.basename.upper()`_INCLUDED

$0

#endif
endsnippet

snippet Main "int main(...)"
int main(int argc, const char* argv[])
{
  ${1}
  return 0;
}
endsnippet

snippet using "using name = ...;"
using ${1:name} = ${2:type};
endsnippet

snippet tpl "template<...>"
template <typename ${1:T}>
endsnippet

snippet cl "class ..."
class ${1:`!p snip.rv = snip.basename.title() or "name"`} {
  public:
    ${1/(\w+).*/$1/}() = default;
};
endsnippet

snippet dt "~class() = default"
~${1}() = default;
endsnippet

snippet vdt "virtual ~class() = default;"
virtual ~${1}() = default;
endsnippet

snippet cct "class(const class& other) = default;"
${1}(const ${1/(\w+).*/$1/}& other) = default;
${1/(\w+).*/$1/}& operator=(const ${1/(\w+).*/$1/}& other) = default;
endsnippet

snippet mct "class(class&& other) = default;"
${1}(${1/(\w+).*/$1/}&& other) = default;
${1/(\w+).*/$1/}& operator=(${1/(\w+).*/$1/}&& other) = default;
endsnippet

snippet stt "struct ..."
struct ${1:`!p snip.rv = snip.basename or "name"`} {
  $2
};
endsnippet

snippet enm "enum ..."
enum class ${1:`!p snip.rv = snip.basename or "name"`} {
  $2
};
endsnippet

snippet unn "union ..."
union ${1:`!p snip.rv = snip.basename or "name"`} {
  $2
};
endsnippet

snippet ns "namespace ..."
namespace${1/.+/ /m}${1:`!p snip.rv = snip.basename or "name"`}
{
  ${VISUAL}$0
}${1/.+/ \/* /m}$1${1/.+/ *\/ /m}
endsnippet

# Syntatic sugar
snippet fori "for (int i = 0; i < ...; ++i)"
for (int ${1:i} = 0; ${2:condition}; ++${1/(\w+).*/$1/}) {
  ${3}
}
endsnippet

snippet fore "for (auto ... : ...)"
for (const auto& ${1:item} : ${2:col}) {
  ${3}
}
endsnippet

snippet "([.\w]+).fore" "for (auto ... : ...)" r
for (const auto& ${1:item} : `!p snip.rv = match.group(1)`) {
  ${2}
}
endsnippet

snippet forb "for (auto it = ...; it != ...; ++it)"
for (auto ${1:it} = std::begin(${2:item}); ${1/(\w+).*/$1/} != std::end(${2/(\w+).*/$1/}); ++${1/(\w+).*/$1/}) {
  ${3}
}
endsnippet

snippet ld "[...](...) {...}"
[${1}](${2:args}) {
  ${3}
}
endsnippet

snippet if "if (...) {...}"
if ($1) {
  $0
}
endsnippet

snippet elif "else if (...) {...}"
else if ($1) {
  ${VISUAL}$0
}
endsnippet

snippet else "else {...}"
else {
    ${VISUAL}$0
}
endsnippet

snippet switch "switch (...) {...}"
switch (${1}) {
  case ${2}:
    break;
  default:
    break;
}
endsnippet

snippet case "case ...: break;"
case ${1}:
  break;
endsnippet

snippet try "try {...} catch (...) {...}"
try {
  ${VISUAL}$1
} catch (${2:const std::exception& e}) {
  $3
}
endsnippet

snippet fswap "friend swap(...) {...}"
void swap(${1:auto}& other) noexcept {
  using std::swap;
  swap(${2:x}, other.${2/(\w+).*/$1/});
}

friend void swap(${1:auto}& lhs, ${1/(\w+).*/$1/}& rhs) noexcept { lhs.swap(rhs); }
endsnippet

snippet cla "An entire .h generator" b
#ifndef ${2:`!v substitute(vim_snippets#Filename('$1_H','ClassName'),'.*','\U&\E','')`}
#define $2

class ${1:`!v substitute(substitute(vim_snippets#Filename('$1','ClassName'),'^.','\u&',''), '_\(\w\)', '\u\1', 'g')`}
{
public:
  $1();
};

#endif /* $2 */
endsnippet

# Standard Functions/Templates
snippet std "std::"
std::${1}
endsnippet

snippet sout "std::cout << ..."
std::cout << "${1}\n";
endsnippet

snippet printf "std::printf(...)"
std::printf("${1:%s}\n"${1/([^%]|%%)*(%.)?.*/(?2:, :\);)/}$2${1/([^%]|%%)*(%.)?.*/(?2:\);)/}
endsnippet

snippet puts "std::puts(...)"
std::puts("${1:text}");
endsnippet

snippet string "std::string ..." i
std::string ${1}{"${2}"}
endsnippet

snippet strv "std::string_view ..." i
std::string_view ${1}{"${2}"}
endsnippet

snippet "([.\w]+).sca" "static_cast<...>(...)" r
static_cast<$1>(`!p snip.rv = match.group(1)`)$2
endsnippet

snippet "([.\w]+).dca" "dynamic_cast<...>(...)" r
dynamic_cast<$1>(`!p snip.rv = match.group(1)`)$2
endsnippet
snippet "([.\w]+).rca" "reinterpret_cast<...>(...)" r

reinterpret_cast<$1>(`!p snip.rv = match.group(1)`)$2
endsnippet

snippet "([.\w]+).cca" "const_cast<...>(...)" r
const_cast<$1>(`!p snip.rv = match.group(1)`)$2
endsnippet

snippet "([.\w]+).vec" "std::vector<...>" r
std::vector<`!p snip.rv = match.group(1)`>$1
endsnippet

snippet "([.\w]+).arr" "std::array<..., ...>" r
std::array<`!p snip.rv = match.group(1)`, $1>
endsnippet

snippet "([.\w]+).umap" "std::unordered_map<..., ...>" r
std::unordered_map<`!p snip.rv = match.group(1)`, ${1}>$2
endsnippet

snippet "([.\w]+).map" "std::map<..., ...> ..." r
std::map<`!p snip.rv = match.group(1)`, ${1}>$2
endsnippet

snippet "([.\w]+).uset" "std::unordered_set<...> ..." r
std::unordered_set<`!p snip.rv = match.group(1)`>$1
endsnippet

snippet "([.\w]+).set" "std::set<...> ..." r
std::set<`!p snip.rv = match.group(1)`>$1
endsnippet

snippet "([.\w]+).beg" "std::begin(...)" r
std::begin(`!p snip.rv = match.group(1)`)$1
endsnippet

snippet "([.\w]+).end" "std::end(...)" r
std::end(`!p snip.rv = match.group(1)`)$1
endsnippet

snippet "([.\w]+).range" "std::begin(...), std::end(...)" r
std::begin(`!p snip.rv = match.group(1)`), std::end(`!p snip.rv = match.group(1)`)$1
endsnippet

snippet "([.\w]+).up" "std::unique_ptr<...>" r
std::unique_ptr<`!p snip.rv = match.group(1)`>$1
endsnippet

snippet "([.\w]+).mup" "std::make_unique<...>(...)" r
std::make_unique<`!p snip.rv = match.group(1)`>($1)
endsnippet

snippet "([.\w]+).sp" "std::shared_ptr<...>" r
std::shared_ptr<`!p snip.rv = match.group(1)`>$1
endsnippet

snippet "([.\w]+).msp" "std::make_shared<...>(...)" r
std::make_shared<`!p snip.rv = match.group(1)`>($1)
endsnippet

snippet "([.\w]+).fw" "std::forward<...>(...)" r
std::forward<`!p snip.rv = match.group(1)`>($1)
endsnippet

snippet "([.\w]+).mv" "std::move(...)" r
std::move(`!p snip.rv = match.group(1)`)$1
endsnippet

snippet pair "std::pair<..., ...> p" i
std::pair<${1}, ${2}>
endsnippet

snippet mpair "std::make_pair(..., ...)" i
std::make_pair(${1:first}, ${2:second})
endsnippet

snippet ex "std::exchange(...)" i
std::exchange(${1:lhs}, ${2:rhs})
endsnippet

snippet eit "std::enable_if_t<...>" i
std::enable_if_t<${1:condition}>
endsnippet

snippet is "std::is_same_v<...>" i
std::is_same_v<${1:T1}, ${2:T2}>
endsnippet

